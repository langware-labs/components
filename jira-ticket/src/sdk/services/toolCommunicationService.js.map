{"version":3,"file":"toolCommunicationService.js","sourceRoot":"","sources":["toolCommunicationService.ts"],"names":[],"mappings":"AAAA,qFAAqF;AACrF,MAAM,eAAe,GAAG,uBAAuB,CAAC;AAChD,MAAM,iBAAiB,GAAG,oBAAoB,CAAC;AAE/C,MAAM,gBAAgB;IAAtB;QACU,cAAS,GAA8C,EAAE,CAAC;IAwBpE,CAAC;IAvBC,WAAW,CAAC,QAAgB,EAAE,OAAY;QACxC,MAAM,SAAS,GAAG,IAAI,WAAW,CAAC,eAAe,GAAG,QAAQ,EAAE;YAC5D,MAAM,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE;SAC7B,CAAC,CAAC;QACH,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IAClC,CAAC;IAED,iBAAiB,CAAC,QAAgB,EAAE,QAAgC;QAClE,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC7B,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,QAAQ,GAAG,iBAAiB,CAAC,CAAC;QAC3E,CAAC;QAED,MAAM,eAAe,GAAG,CAAC,KAAU,EAAE,EAAE;YACrC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;QAChC,CAAC,CAAC;QACF,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,eAAe,CAAC;QAC3C,MAAM,CAAC,gBAAgB,CAAC,iBAAiB,GAAG,QAAQ,EAAE,eAAe,CAAC,CAAC;IACzE,CAAC;IAED,aAAa,CAAC,QAAgB;QAC5B,MAAM,CAAC,mBAAmB,CAAC,iBAAiB,GAAG,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;QACnF,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;CACF;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG,IAAI,gBAAgB,EAAE,CAAC;AAEvD,eAAe,gBAAgB,CAAC","sourcesContent":["// Events for communication between tools - named opposite of the senders perspective\nconst sendEventPrefix = 'receive-tool-message-';\nconst listenEventPrefix = 'send-tool-message-';\n\nclass ToolCommunicator {\n  private callbacks: { [key: string]: (message: any) => void } = {};\n  sendMessage(targetId: string, message: any) {\n    const toolEvent = new CustomEvent(sendEventPrefix + targetId, {\n      detail: { message: message }\n    });\n    window.dispatchEvent(toolEvent);\n  }\n\n  listenForMessages(targetId: string, callback: (message: any) => void) {\n    if (this.callbacks[targetId]) {\n      throw new Error('Listener for targetId ' + targetId + ' already exists');\n    }\n\n    const wrappedCallback = (event: any) => {\n      callback(event.detail.message)\n    };\n    this.callbacks[targetId] = wrappedCallback;\n    window.addEventListener(listenEventPrefix + targetId, wrappedCallback);\n  }\n\n  stopListening(targetId: string) {\n    window.removeEventListener(listenEventPrefix + targetId, this.callbacks[targetId]);\n    delete this.callbacks[targetId];\n  }\n}\n\nexport const toolCommunicator = new ToolCommunicator();\n\nexport default toolCommunicator;"]}