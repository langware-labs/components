{"version":3,"file":"code-snippet.js","sourceRoot":"","sources":["src/code-snippet.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAClE,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AAC3E,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AACrD,OAAO,EAAE,IAAI,IAAI,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACzD,OAAO,EAAE,UAAU,IAAI,MAAM,EAAE,MAAM,6BAA6B,CAAC;AACnE,OAAO,EAAE,GAAG,IAAI,OAAO,EAAE,MAAM,sBAAsB,CAAC;AACtD,OAAO,EAAE,OAAO,EAAE,MAAM,4BAA4B,CAAC;AAG9C,IAAM,WAAW,GAAjB,MAAM,WAAY,SAAQ,UAAU;IAApC;;QACO,aAAQ,GAAG,EAAE,CAAC;QACd,WAAM,GAAG,EAAE,CAAC;QACZ,YAAO,GAAG,EAAE,CAAC;QAEhB,gBAAW,GAAG,MAAM,CAAC,CAAC,uCAAuC;IAmJxE,CAAC;IAnHU,YAAY;QACnB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,UAAU,EAAE,aAAa,CAAC,wBAAwB,CAAgB,CAAC;QAChG,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC1B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC1C,CAAC;IACH,CAAC;IAED,gBAAgB,CAAC,IAAY;QAC3B,MAAM,UAAU,GAAG,WAAW,CAAC,MAAM,CAAC;YACpC,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;YAC9B,UAAU,EAAE;gBACV,MAAM,CAAC,EAAE,CAAC,aAAa,CAAC;gBACxB,mBAAmB,EAAE;gBACrB,OAAO;gBACP,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC;gBAC/B,UAAU,CAAC,cAAc,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE;oBACpC,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;wBACtB,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;wBACzC,QAAQ,IAAI,CAAC,WAAW,EAAE,CAAC;4BACzB,KAAK,MAAM;gCACT,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gCACrB,MAAM;4BACR,KAAK,IAAI;gCACP,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gCACnB,MAAM;4BACR,KAAK,KAAK;gCACR,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gCACpB,MAAM;wBACV,CAAC;oBACH,CAAC;gBACH,CAAC,CAAC;aACH;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,GAAG,IAAI,UAAU,CAAC;YAC/B,KAAK,EAAE,UAAU;YACjB,MAAM,EAAE,IAAI,CAAC,gBAAgB;SAC9B,CAAC,CAAC;IACL,CAAC;IAED,oBAAoB,CAAC,IAAY;QAC/B,QAAQ,IAAI,EAAE,CAAC;YACb,KAAK,MAAM;gBACT,OAAO,QAAQ,EAAE,CAAC;YACpB,KAAK,IAAI;gBACP,OAAO,MAAM,EAAE,CAAC;YAClB,KAAK,KAAK;gBACR,OAAO,OAAO,EAAE,CAAC;YACnB;gBACE,OAAO,EAAE,CAAC;QACd,CAAC;IACH,CAAC;IAED,cAAc,CAAC,IAAY;QACzB,QAAQ,IAAI,EAAE,CAAC;YACb,KAAK,MAAM;gBACT,OAAO,IAAI,CAAC,QAAQ,CAAC;YACvB,KAAK,IAAI;gBACP,OAAO,IAAI,CAAC,MAAM,CAAC;YACrB,KAAK,KAAK;gBACR,OAAO,IAAI,CAAC,OAAO,CAAC;YACtB;gBACE,OAAO,EAAE,CAAC;QACd,CAAC;IACH,CAAC;IAEQ,OAAO,CAAC,iBAAyD;QACxE,IAAI,iBAAiB,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YAC5D,iEAAiE;YACjE,qDAAqD;YACrD,kEAAkE;YAClE,MAAM;YACN,yCAAyC;YACzC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;gBACvB,OAAO,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;aAC1G,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,SAAS,CAAC,CAAa;QACrB,MAAM,GAAG,GAAI,CAAC,CAAC,MAAsB,CAAC,OAAO,CAAC,GAAG,CAAC;QAClD,IAAI,GAAG,EAAE,CAAC;YACR,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;YACvB,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC;IACH,CAAC;IAED,OAAO;QACL,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,aAAa,CAAC,QAAQ,CAAsB,CAAC;QAC7E,IAAI,MAAM,EAAE,CAAC;YACX,MAAM,GAAG,GAAG,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,aAAa,EAAE,QAAQ,CAAC;YACrE,IAAI,GAAG,EAAE,CAAC;gBACR,GAAG,CAAC,IAAI,EAAE,CAAC;gBACX,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACzB,GAAG,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,CAAC;gBACjD,GAAG,CAAC,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,CAAC;gBAClD,GAAG,CAAC,KAAK,EAAE,CAAC;YACd,CAAC;QACH,CAAC;IACH,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA;qBACM,IAAI,CAAC,SAAS;2BACR,IAAI,CAAC,WAAW,KAAK,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;2BAC3C,IAAI,CAAC,WAAW,KAAK,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;2BACzC,IAAI,CAAC,WAAW,KAAK,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;;;wBAG7C,IAAI,CAAC,OAAO;;;;KAI/B,CAAC;IACJ,CAAC;;AA9Ie,kBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0B3B,AA1BqB,CA0BpB;AAlCU;IAAX,QAAQ,EAAE;6CAAe;AACd;IAAX,QAAQ,EAAE;2CAAa;AACZ;IAAX,QAAQ,EAAE;4CAAc;AAEhB;IAAR,KAAK,EAAE;gDAAsB;AALnB,WAAW;IADvB,aAAa,CAAC,cAAc,CAAC;GACjB,WAAW,CAwJvB","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport {customElement, property, state } from 'lit/decorators.js';\nimport { EditorState } from '@codemirror/state';\nimport { EditorView, keymap, highlightActiveLine } from '@codemirror/view';\nimport { defaultKeymap } from '@codemirror/commands';\nimport { html as htmlLang } from '@codemirror/lang-html';\nimport { javascript as jsLang } from '@codemirror/lang-javascript';\nimport { css as cssLang } from '@codemirror/lang-css';\nimport { oneDark } from '@codemirror/theme-one-dark';\n\n@customElement('code-snippet')\nexport class CodeSnippet extends LitElement {\n  @property() htmlCode = '';\n  @property() jsCode = '';\n  @property() cssCode = '';\n\n  @state() selectedTab = 'html'; // Possible values: 'html', 'js', 'css'\n  private editorView?: EditorView;\n  private editorParentNode?: HTMLElement;\n\n  static override styles = css`\n    :host {\n      display: block;\n      margin: auto;\n      width: 80%;\n    }\n    .tab {\n      cursor: pointer;\n      padding: 10px;\n      border: 1px solid #ccc;\n      display: inline-block;\n      background-color: #f9f9f9;\n    }\n    .tab.active {\n      background-color: #fff;\n      border-bottom: none;\n    }\n    .code-editor-container {\n      border: 1px solid #ccc;\n      height: 200px;\n      margin-top: -1px;\n    }\n    .result {\n      border: 1px solid #ccc;\n      margin-top: 20px;\n    }\n  `;\n\n  override firstUpdated() {\n    this.editorParentNode = this.shadowRoot?.querySelector('.code-editor-container') as HTMLElement;\n    if (this.editorParentNode) {\n      this.initializeEditor(this.selectedTab);\n    }\n  }\n\n  initializeEditor(mode: string) {\n    const startState = EditorState.create({\n      doc: this.getCodeForMode(mode),\n      extensions: [\n        keymap.of(defaultKeymap),\n        highlightActiveLine(),\n        oneDark,\n        this.getLanguageExtension(mode),\n        EditorView.updateListener.of(update => {\n          if (update.docChanged) {\n            const code = update.state.doc.toString();\n            switch (this.selectedTab) {\n              case 'html':\n                this.htmlCode = code;\n                break;\n              case 'js':\n                this.jsCode = code;\n                break;\n              case 'css':\n                this.cssCode = code;\n                break;\n            }\n          }\n        })\n      ],\n    });\n\n    this.editorView = new EditorView({\n      state: startState,\n      parent: this.editorParentNode\n    });\n  }\n\n  getLanguageExtension(mode: string) {\n    switch (mode) {\n      case 'html':\n        return htmlLang();\n      case 'js':\n        return jsLang();\n      case 'css':\n        return cssLang();\n      default:\n        return [];\n    }\n  }\n\n  getCodeForMode(mode: string): string {\n    switch (mode) {\n      case 'html':\n        return this.htmlCode;\n      case 'js':\n        return this.jsCode;\n      case 'css':\n        return this.cssCode;\n      default:\n        return '';\n    }\n  }\n\n  override updated(changedProperties: Map<string | number | symbol, unknown>) {\n    if (changedProperties.has('selectedTab') && this.editorView) {\n      // const extension = this.getLanguageExtension(this.selectedTab);\n      // const updateState = this.editorView.state.update({\n      //   effects: EditorState.reconfigure({ extensions: [extension] })\n      // });\n      // this.editorView.update([updateState]);\n      this.editorView.dispatch({\n        changes: { from: 0, to: this.editorView.state.doc.length, insert: this.getCodeForMode(this.selectedTab) }\n      });\n    }\n  }\n\n  selectTab(e: MouseEvent) {\n    const tab = (e.target as HTMLElement).dataset.tab;\n    if (tab) {\n      this.selectedTab = tab;\n      this.updated(new Map([['selectedTab', tab]]));\n    }\n  }\n\n  runCode() {\n    const iframe = this.shadowRoot?.querySelector('iframe') as HTMLIFrameElement;\n    if (iframe) {\n      const doc = iframe.contentDocument || iframe.contentWindow?.document;\n      if (doc) {\n        doc.open();\n        doc.write(this.htmlCode);\n        doc.write('<style>' + this.cssCode + '</style>');\n        doc.write('<script>' + this.jsCode + '</script>');\n        doc.close();\n      }\n    }\n  }\n\n  override render() {\n    return html`\n      <div @click=\"${this.selectTab}\">\n        <span class=\"tab ${this.selectedTab === 'html' ? 'active' : ''}\" data-tab=\"html\">HTML</span>\n        <span class=\"tab ${this.selectedTab === 'js' ? 'active' : ''}\" data-tab=\"js\">JS</span>\n        <span class=\"tab ${this.selectedTab === 'css' ? 'active' : ''}\" data-tab=\"css\">CSS</span>\n      </div>\n      <div class=\"code-editor-container\"></div>\n      <button @click=\"${this.runCode}\">Run</button>\n      <div class=\"result\">\n        <iframe></iframe>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'code-snippet': CodeSnippet;\n  }\n}\n"]}